package org.tmf.dsmapi.address;

import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.tmf.dsmapi.commons.facade.AbstractFacade;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.tmf.dsmapi.commons.exceptions.BadUsageException;
import org.tmf.dsmapi.commons.exceptions.ExceptionType;
import org.tmf.dsmapi.commons.exceptions.UnknownResourceException;
import org.tmf.dsmapi.commons.utils.BeanUtils;
import org.tmf.dsmapi.address.model.Address;
import org.tmf.dsmapi.address.event.AddressEventPublisherLocal;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.ArrayList;
import java.util.List;
import org.tmf.dsmapi.address.model.SubAddress;
import org.tmf.dsmapi.address.model.SubAddressRef;
import org.tmf.dsmapi.commons.exceptions.FunctionalException;
import org.tmf.dsmapi.commons.exceptions.TechnicalException;
import org.tmf.dsmapi.subAddress.SubAddressFacade;

@Stateless
public class AddressFacade extends AbstractFacade<Address> {

    @PersistenceContext(unitName = "DSAddressPU")
    private EntityManager em;
    @EJB
    AddressEventPublisherLocal publisher;
//    StateModelImpl stateModel = new StateModelImpl();

    @EJB
    SubAddressFacade subAddressFacade;

    public AddressFacade() {
        super(Address.class);
    }

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public void validate(Address entity) throws BadUsageException, UnknownResourceException {

        if (entity.getId() == null || entity.getId().isEmpty()) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_GENERIC, "While validate Address, id must be not null");
        } else {
            this.find(entity.getId());
        }
        if (entity.getPostcode().equals("5004") && entity.getLocality().equals("Brighton")) {
            Logger.getLogger(AddressFacade.class.getName()).log(Level.INFO, "Address with id " + entity.getId() + "is validated");
        } else {
            throw new BadUsageException(ExceptionType.BAD_USAGE_FORMAT,
                    "Poscode :" + entity.getPostcode() + " is unknown in locality : " + entity.getLocality());
        }

    }

    public List<SubAddress> findSubAddress(String addressId) throws BadUsageException, UnknownResourceException {

        Address address = find(addressId);
        List<SubAddress> resultList = new ArrayList<SubAddress>();
        for (SubAddressRef subAddressRef : address.getSubAddress()) {
            SubAddress subAdd = subAddressFacade.find(subAddressRef.getId());
            if (null != subAdd) {
                resultList.add(subAddressFacade.find(subAddressRef.getId()));
            }
        }

        //BOUCHON
//        List<SubAddress> resultList = new ArrayList<SubAddress>();
//        if (addressId.equals("76608281")) {
//            resultList = SubAddressFactory.createListeSubAddress();
//        }
        return resultList;
    }

    public SubAddress getSubAddress(String addressId, String subAddressId) throws BadUsageException, UnknownResourceException, FunctionalException {

        Address address = find(addressId);
        SubAddress result = null;
        boolean trouve = false;
        for (SubAddressRef subAddressRef : address.getSubAddress()) {
            if (subAddressId.equals(subAddressRef.getId())) {
                result = subAddressFacade.find(subAddressRef.getId());
                trouve = true;
            }
        }

        if (null == result) {
            throw new UnknownResourceException(ExceptionType.UNKNOWN_RESOURCE,"La sous adresse id " + subAddressId + " n'existe pas dans l'adresse id : " + addressId);
        }
        return result;

    }

    public void checkCreation(Address entity) throws BadUsageException, UnknownResourceException {

        Address sc = null;
        if (entity.getId() == null
                || entity.getId().isEmpty()) {
//            throw new BadUsageException(ExceptionType.BAD_USAGE_GENERIC, "While creating Address, id must be not null");
            //Do nothing create ok
            Logger.getLogger(AddressFacade.class.getName()).log(Level.INFO, "Address with autogenerated id is being posted");
        } else {
            try {
                sc = this.find(entity.getId());
                if (null != sc) {
                    throw new BadUsageException(ExceptionType.BAD_USAGE_GENERIC,
                            "Duplicate Exception, Address with same id :" + entity.getId() + " alreay exists");
                }
            } catch (UnknownResourceException ex) {
                //Do nothing create ok
                Logger.getLogger(AddressFacade.class.getName()).log(Level.INFO, "Address with id = " + entity.getId() + " is being posted", ex);
            }
        }

        //verify first status
        /**
         * if (null == entity.getLifecycleState()) {
         * entity.setLifecycleState(LifecycleStateValues.PENDING); throw new
         * BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS,
         * "LifecycleState is mandatory"); } else { if
         * (!entity.getLifecycleState().name().equalsIgnoreCase(LifecycleStateValues.PENDING.name()))
         * { throw new
         * BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION,
         * "lifecycleState " + entity.getLifecycleState().value() + " is not the
         * first state, attempt : " + LifecycleStateValues.PENDING.value()); } }
         */
    }

    public Address patchAttributs(String id, Address partialEntity) throws UnknownResourceException, BadUsageException {
        Address currentEntity = this.find(id);

        if (currentEntity == null) {
            throw new UnknownResourceException(ExceptionType.UNKNOWN_RESOURCE);
        }

        verifyStatus(currentEntity, partialEntity);

        ObjectMapper mapper = new ObjectMapper();
        JsonNode node = mapper.convertValue(partialEntity, JsonNode.class);
        partialEntity.setId(id);
        if (BeanUtils.patch(currentEntity, partialEntity, node)) {
            publisher.valueChangedNotification(currentEntity, new Date());
        }

        return currentEntity;
    }

    public void verifyStatus(Address currentEntity, Address partialEntity) throws BadUsageException {
        /**
         * if (null != partialEntity.getLifecycleState()) {
         * stateModel.checkTransition(currentEntity.getLifecycleState(),
         * partialEntity.getLifecycleState());
         * publisher.statusChangedNotification(currentEntity, new Date()); }
         */
    }

}
