package org.tmf.dsmapi.streetSegment;

import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.tmf.dsmapi.commons.facade.AbstractFacade;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.tmf.dsmapi.commons.exceptions.BadUsageException;
import org.tmf.dsmapi.commons.exceptions.ExceptionType;
import org.tmf.dsmapi.commons.exceptions.UnknownResourceException;
import org.tmf.dsmapi.commons.utils.BeanUtils;
import org.tmf.dsmapi.address.model.StreetSegment;
import org.tmf.dsmapi.streetSegment.event.StreetSegmentEventPublisherLocal;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;

@Stateless
public class StreetSegmentFacade extends AbstractFacade<StreetSegment> {

    @PersistenceContext(unitName = "DSAddressPU")
    private EntityManager em;
    @EJB
    StreetSegmentEventPublisherLocal publisher;
//    StateModelImpl stateModel = new StateModelImpl();

    public StreetSegmentFacade() {
        super(StreetSegment.class);
    }

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public List<StreetSegment> findAllStreetSegmentWithStreetId(String streetId) {
        javax.persistence.criteria.CriteriaBuilder criteriaBuilder = em.getCriteriaBuilder();
        javax.persistence.criteria.CriteriaQuery<StreetSegment> criteriaQuery = criteriaBuilder.createQuery(StreetSegment.class);
        javax.persistence.criteria.Root<StreetSegment> root = criteriaQuery.from(StreetSegment.class);
        
        criteriaQuery.select(root).where(criteriaBuilder.equal(root.get("street").get("id"), streetId));
//        criteriaQuery.select(root).where(criteriaBuilder.equal(root.get("number"), "1"));
        
        List<StreetSegment> resultList = em.createQuery(criteriaQuery).getResultList();
        return resultList;
    }

    public void checkCreation(StreetSegment entity) throws BadUsageException, UnknownResourceException {

        StreetSegment sc = null;
        if (entity.getId() == null
                || entity.getId().isEmpty()) {
//            throw new BadUsageException(ExceptionType.BAD_USAGE_GENERIC, "While creating StreetSegment, id must be not null");
                //Do nothing create ok
                Logger.getLogger(StreetSegmentFacade.class.getName()).log(Level.INFO, "StreetSegment with autogenerated id is being posted");
        } else {
            try {
                sc = this.find(entity.getId());
                if (null != sc) {
                    throw new BadUsageException(ExceptionType.BAD_USAGE_GENERIC,
                            "Duplicate Exception, StreetSegment with same id :" + entity.getId() + " alreay exists");
                }
            } catch (UnknownResourceException ex) {
                //Do nothing create ok
                Logger.getLogger(StreetSegmentFacade.class.getName()).log(Level.INFO, "StreetSegment with id = " + entity.getId() + " is being posted", ex);
            }
        }

        //verify first status
        /**
        if (null == entity.getLifecycleState()) {
            entity.setLifecycleState(LifecycleStateValues.PENDING);
            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "LifecycleState is mandatory");
        } else {
            if (!entity.getLifecycleState().name().equalsIgnoreCase(LifecycleStateValues.PENDING.name())) {
                throw new BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION, "lifecycleState " + entity.getLifecycleState().value() + " is not the first state, attempt : " + LifecycleStateValues.PENDING.value());
            }
        }
        */

    }

    public StreetSegment patchAttributs(String id, StreetSegment partialEntity) throws UnknownResourceException, BadUsageException {
        StreetSegment currentEntity = this.find(id);

        if (currentEntity == null) {
            throw new UnknownResourceException(ExceptionType.UNKNOWN_RESOURCE);
        }

        verifyStatus(currentEntity, partialEntity);

        ObjectMapper mapper = new ObjectMapper();
        JsonNode node = mapper.convertValue(partialEntity, JsonNode.class);
        partialEntity.setId(id);
        if (BeanUtils.patch(currentEntity, partialEntity, node)) {
            publisher.valueChangedNotification(currentEntity, new Date());
        }

        return currentEntity;
    }

    public void verifyStatus(StreetSegment currentEntity, StreetSegment partialEntity) throws BadUsageException {
        /**
        if (null != partialEntity.getLifecycleState()) {
            stateModel.checkTransition(currentEntity.getLifecycleState(), partialEntity.getLifecycleState());
            publisher.statusChangedNotification(currentEntity, new Date());
        }
        */
    }

}
